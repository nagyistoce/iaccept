IMPORTANT : THIS TUTORIAL IS CURRENTLY UNDER CONSTRUCTION - DO NOT USE YET!!!

In this simple tutorial, we will build a new application to show you how to get started from scratch.  If you have experience with Objective-C and iOS development, you can skip directly to the FirstTest wiki page that will show you how to add acceptance tests to an existing project.

<h2> Our requirements </h2> 
We'll be building a very simple Hello World application. 

Let's say our application will have user stories :
 * US1: Say hello [just display Hello World! in a button at startup]
 * US2: Say goodby [when the button is clicked, display the Goodbye message]
 * US3: Hide the app [when is cliked while displaying Goodbye, quit the application]

In ATDD (Acceptance tests driven development), we want to first define the acceptance criteria of any functionality we are going to be building. The goal is to provide an unambiguous definition of the requirements to the development team so they know exactly what they need to do in the form of executable acceptance tests.

As a team, we've defined our iAccept acceptance test scenarios for these stories :

SC1 :  Say hello
 * Given I started the application
 * Then the Hello World! message is displayed

SC2 :  Say goodbye
 * Given I started the application
 * When I touch the message
 * Then the Goodbye message is displayed

SC3 :  Say i am back
 * Given the Goodbye message is displayed
 * When I touch the message
 * Then the I am back message is displayed


<h2> Let's setup our project environment... </h2> 

Before we start, you must have Xcode installed on your mac.  This tutorial is done with Xcode 4.3.

Here we go!

<h3>Step 1 : Creating the Helloworld project </h3>

Step 1.1 : <i>Open Xcode and click on "Create a new Xcode project".</i>

http://iaccept.googlecode.com/svn/wiki/images/helloworld1.png

Step 1.2 : <i>Select iOS Application -> Single View Application.</i>

http://iaccept.googlecode.com/svn/wiki/images/helloworld2.png

Step 1.3 : <i>Click next and enter your Application details.</i>

http://iaccept.googlecode.com/svn/wiki/images/helloworld3.png

Step 1.4 : <i>Choose the location of your project and click Create.</i>

http://iaccept.googlecode.com/svn/wiki/images/helloworld4.png

Step 1.5 : We now have a new single view project.

http://iaccept.googlecode.com/svn/wiki/images/helloworld5.png

<h3>Step 2 : Creating a target to hold our acceptance tests </h3>
By putting the tests in a different target, we make it easier to isolate them so they wont be embedded in our application. We will be able to ship it without any dependency to the test framework.

Step 2.1 :<i> At the bottom of the screen, click on the Add Target button.  You must be in the project settings.</i>

http://iaccept.googlecode.com/svn/wiki/images/helloworld6.png

You will then see the template screen.  Choose Empty Application.

http://iaccept.googlecode.com/svn/wiki/images/helloworld7.png

Step 2.2 : <i>Click next and enter the new target's details.  I like to use the name of my application prefixed with "at" standing for "acceptance tests". </i>

http://iaccept.googlecode.com/svn/wiki/images/helloworld8.png

Step 2.3: <i>Click Finish.</i> We now have our test taget.  To be able to use iAccept, we must link the iAccept framework with our target.  Go in the atHelloWorld target settings, and click the summary tab.  Scroll down until you see the "Link Frameworks and Libraries" section.

http://iaccept.googlecode.com/svn/wiki/images/helloworld9.png

Step 2.4: <i>Click the + sign and the bottom of the section and thne click the Add Other... button.</i>  

http://iaccept.googlecode.com/svn/wiki/images/helloworld10.png

Step 2.5: <i>Navigate to the location of the iAccept framework you downloaded from the Downloads section of this site and select the unzipped framework.  Click Open.</i>

http://iaccept.googlecode.com/svn/wiki/images/helloworld11.png

Step 2.6: <i>You can now see the iAccept framework in the list.</i>

http://iaccept.googlecode.com/svn/wiki/images/helloworld12.png

Step 2.7: <i>iAccept has a dependency on the MapKit framework from the iOS sdk.  You must add this dependency by clicking the + button then add the MapKit framework under IOS 5.0.</i>

http://iaccept.googlecode.com/svn/wiki/images/helloworld13.png

Step 2.8: <i>Your linked frameworks list should look like this:</i>

http://iaccept.googlecode.com/svn/wiki/images/helloworld14.png

Step 2.9 : To test HelloWorld application, we need to add its files in atHelloWorld target.  
Under "Compile Sources", you add the file ETAppDelegate.m and under "Copy Bundle Resources" you add ETViewController.xib by clicking on the + button at the end of each section.  After doing so, it should look like this:

http://iaccept.googlecode.com/svn/wiki/images/helloworld17.png

Step 2.10: <i>Open the atHelloWorld target in the tree in the left pane of Xcode and delete the files ETAppDelegate.h and ETAppDelegate.m.  Sinc atHelloWorld is the test target, we dont need those files.</i>

http://iaccept.googlecode.com/svn/wiki/images/helloworld16.png

Step 2.11: To finish the setup, go in the main.m file of atHelloWorld target.

http://iaccept.googlecode.com/svn/wiki/images/helloworld15.png

Add the missing lines to your main.m file so it looks like this :

{{{
#import <UIKit/UIKit.h>
#import <Framework-iAccept/IARunner.h>
#import <Framework-iAccept/IADefaultRunnerExitHandler.h>
#import <Framework-iAccept/IAConfig.h>
#import "ETAppDelegate.h"

int main(int argc, char *argv[])
{
  @autoreleasepool {
        
    IARunner* runner = [[IARunner alloc]init];
    [runner addObserver:[[IADefaultRunnerExitHandler alloc] init]];
    [[IAConfig sharedInstance] setDelayBetweenTestsInSeconds:0.1];
    [[IAConfig sharedInstance] setDelayBetweenTestStatementsInSeconds:0.4];
        
    [runner runAfterDelay:1];
    return UIApplicationMain(argc, argv, nil, NSStringFromClass([ETAppDelegate class]));
  }
}
}}}

<h3>Step 3 : Writing the acceptance tests first !!! </h3>

We're all setup and our team has come with some test scenarios . How do we turn that into an executable specification?

Step 3.1: <i></i>

<h2> Writing the code for US1 : Say Hello </h2>

<h2> Writing the code for US2 : Say Goodbye </h2>

<h2> Writing the code for US3 : Hide the app </h2>